{"mappings":"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","sources":["<anon>","src/scripts/script.js"],"sourcesContent":["//=====================\n// Переменные\nlet cardArray = [];\nlet cardArrayBoard1 = [];\nlet cardArrayBoard2 = [];\nlet cardArrayBoard3 = [];\nconst boards = {\n    0: cardArrayBoard1,\n    1: cardArrayBoard2,\n    2: cardArrayBoard3\n};\nlet activeBoardIndex = -1;\n//=====================\n// Методы\nasync function getCards() {\n    const response = await fetch(\"https://65d85342c96fbb24c1bb40ab.mockapi.io/api/pintrest/PinterestClone\");\n    return await response.json();\n}\nfunction getFromLocalStorage() {\n    if (localStorage.getItem(\"cardArray\")) {\n        cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\n        createCardsGrid(cardArray);\n    }\n    if (localStorage.getItem(\"cardArrayBoard1\")) boards[0] = cardArrayBoard1 = JSON.parse(localStorage.getItem(\"cardArrayBoard1\"));\n    if (localStorage.getItem(\"cardArrayBoard2\")) boards[1] = cardArrayBoard2 = JSON.parse(localStorage.getItem(\"cardArrayBoard2\"));\n    if (localStorage.getItem(\"cardArrayBoard3\")) boards[2] = cardArrayBoard3 = JSON.parse(localStorage.getItem(\"cardArrayBoard3\"));\n}\nfunction setToLocalStorage(array, name) {\n    localStorage.setItem(name, JSON.stringify(array));\n}\n// Создает элемент с указанными свойствами\nfunction createElement({ tag, className, place, text, attribute }) {\n    const someElem = document.createElement(tag);\n    className.forEach((element)=>{\n        someElem.classList.add(element);\n    });\n    if (text) someElem.innerText = text;\n    if (attribute) for(key in attribute)someElem.setAttribute(`${key}`, `${attribute[key]}`);\n    place.append(someElem);\n    return someElem;\n}\n//=================================\n// Заголовок страницы\nfunction searchByLetters(searchTerm, cards) {\n    return cards.filter((card)=>card.hashtag.toLowerCase().includes(searchTerm));\n}\nfunction updateSearchResults(results) {\n    // console.log(\"Обновление отображения результатов: \", results);\n    let main = document.querySelector(\"main\");\n    main.remove();\n    createCardsGrid(results);\n}\n// Создает строку поиска\nfunction createSearchBar(parent) {\n    const inputNav = createElement({\n        tag: \"input\",\n        className: [\n            \"navigation__input\"\n        ],\n        text: undefined,\n        attribute: {\n            type: \"search\",\n            placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A...\"\n        },\n        place: parent\n    });\n    inputNav.addEventListener(\"input\", function(event) {\n        const searchTerm = event.target.value.toLowerCase();\n        // поиск и отображение результатов\n        const board = activeBoardIndex != -1 ? boards[activeBoardIndex] : cardArray;\n        const searchResults = searchByLetters(searchTerm, board);\n        updateSearchResults(searchResults);\n    });\n}\n// Создает элементы выпадающего списка досок\nfunction createBoardsDropdownOptions(dropdown) {\n    const nameBoards = [\n        \"\\u0414\\u043E\\u0441\\u043A\\u0430 1\",\n        \"\\u0414\\u043E\\u0441\\u043A\\u0430 2\",\n        \"\\u0414\\u043E\\u0441\\u043A\\u0430 3\"\n    ];\n    for(let j = 0; j < nameBoards.length; j++){\n        const linkBoard = createElement({\n            tag: \"a\",\n            className: [\n                \"Boards__item\"\n            ],\n            text: nameBoards[j],\n            place: dropdown\n        });\n        linkBoard.addEventListener(\"click\", function(event) {\n            console.log(\"\\u0412\\u044B\\u0431\\u0440\\u0430\\u043D\\u0430 \\u0434\\u043E\\u0441\\u043A\\u0430:\", nameBoards[j]);\n            let main = document.querySelector(\"main\");\n            main.innerHTML = \"\";\n            activeBoardIndex = j;\n            createCardsGrid(boards[j]);\n        });\n    }\n}\n// Создает выпадающие список досок\nfunction createBoardsDropdown(parent) {\n    const dropdownMenu = createElement({\n        tag: \"div\",\n        className: [\n            \"Boards__menu\"\n        ],\n        place: parent\n    });\n    createBoardsDropdownOptions(dropdownMenu);\n    return dropdownMenu;\n}\n// Создает заголовок страницы\nfunction createHeader() {\n    const header = createElement({\n        tag: \"header\",\n        className: [\n            \"header\"\n        ],\n        place: root\n    });\n    const headerContainer = createElement({\n        tag: \"div\",\n        className: [\n            \"header__container\"\n        ],\n        place: header\n    });\n    const navBlock = createElement({\n        tag: \"nav\",\n        className: [\n            \"navigation\"\n        ],\n        place: headerContainer\n    });\n    const linkNav = createElement({\n        tag: \"div\",\n        className: [\n            \"link__nav\"\n        ],\n        place: navBlock\n    });\n    // Банер страницы\n    const imgLink = createElement({\n        tag: \"img\",\n        className: [\n            \"link__img\"\n        ],\n        attribute: {\n            src: \"https://i.pinimg.com/280x280_RS/f6/e9/3a/f6e93a06b500b2d87ffd32e1f56f7c6f.jpg\",\n            alt: \"Pinterest logo\"\n        },\n        place: linkNav\n    });\n    // при загружает грид с главной страницы\n    imgLink.addEventListener(\"click\", function() {\n        activeBoardIndex = -1;\n        createCardsGrid(cardArray);\n    });\n    const divInput = createElement({\n        tag: \"div\",\n        className: [\n            \"div__input-icon\",\n            \"div__input-icon_search\"\n        ],\n        place: navBlock\n    });\n    createSearchBar(divInput);\n    const divButton = createElement({\n        tag: \"div\",\n        className: [\n            \"div__button\"\n        ],\n        place: divInput\n    });\n    const buttonBoards = createElement({\n        tag: \"a\",\n        attribute: {\n            href: \"#\"\n        },\n        className: [\n            \"button-boards\"\n        ],\n        place: divButton\n    });\n    const spanButton = createElement({\n        tag: \"span\",\n        className: [\n            \"button-boards_span\"\n        ],\n        text: \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u0434\\u043E\\u0441\\u043A\\u0443\",\n        place: buttonBoards\n    });\n    createBoardsDropdown(divButton);\n}\n/**\n * Добавляет карточку на выбранную доску\n */ function addCardToBoard(cardData, boardIndex) {\n    switch(boardIndex){\n        case 0:\n            cardArrayBoard1.push(cardData);\n            setToLocalStorage(cardArray, \"cardArray\");\n            setToLocalStorage(cardArrayBoard1, \"cardArrayBoard1\");\n            break;\n        case 1:\n            cardArrayBoard2.push(cardData);\n            setToLocalStorage(cardArray, \"cardArray\");\n            setToLocalStorage(cardArrayBoard2, \"cardArrayBoard2\");\n            break;\n        case 2:\n            cardArrayBoard3.push(cardData);\n            setToLocalStorage(cardArray, \"cardArray\");\n            setToLocalStorage(cardArrayBoard3, \"cardArrayBoard3\");\n            break;\n    }\n    // Для проверки добавления. Потом надо убрать\n    console.log(`\\u{414}\\u{43E}\\u{431}\\u{430}\\u{432}\\u{43B}\\u{435}\\u{43D}\\u{438}\\u{435} \\u{43A}\\u{430}\\u{440}\\u{442}\\u{44B} \\u{43D}\\u{430} \\u{434}\\u{43E}\\u{441}\\u{43A}\\u{443} ${boardIndex}:`, cardData);\n}\n/**\n * Создает список доступных досок\n */ function createBoardsOptions(parent, cardData, nameBoards) {\n    for(let j = 0; j < nameBoards.length; j++){\n        const linkBoard = createElement({\n            tag: \"a\",\n            className: [\n                \"list__item\"\n            ],\n            attribute: {\n                href: \"#\"\n            },\n            text: nameBoards[j],\n            place: parent\n        });\n        linkBoard.addEventListener(\"click\", function() {\n            const index = cardArray.findIndex((item)=>item.id === cardData.id);\n            if (index !== -1) {\n                cardArray.splice(index, 1);\n                addCardToBoard(cardData, j);\n            }\n            cardData.view.remove();\n            cardData.view = null;\n        });\n    }\n}\n//===========================\n// Меню карточки\n// Создаем кнопку для меню карточки\nfunction createPinMenuButton(parent, buttonText, id) {\n    const button = createElement({\n        tag: \"button\",\n        className: [\n            \"pin-menu__button\"\n        ],\n        attribute: {\n            id: [\n                id\n            ]\n        },\n        place: parent,\n        text: buttonText\n    });\n    return button;\n}\n// Создает меню карточки\nfunction createPinMenu(cardData, parent) {\n    const pinMenu = createElement({\n        tag: \"div\",\n        className: [\n            \"pin-menu\"\n        ],\n        place: parent\n    });\n    const buttonAdd = createPinMenuButton(pinMenu, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043D\\u0430 \\u0434\\u043E\\u0441\\u043A\\u0443\", \"button-add\");\n    const buttonComplain = createPinMenuButton(pinMenu, \"\\u041F\\u043E\\u0436\\u0430\\u043B\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\", \"button-complain\");\n    // Открытие окна добавления карточки\n    buttonAdd.addEventListener(\"click\", ()=>{\n        createModalAdd(pinMenu, cardData);\n    });\n    // Открытие окна жалоб\n    buttonComplain.addEventListener(\"click\", ()=>{\n        createComplaintWindow(pinMenu);\n    });\n    return pinMenu;\n}\n//===========================\n// Окно добавления на доску\n/** \n * Создает модальное окно для добавления карточки на доску\n */ function createModalAdd(parent, cardData) {\n    const modalAdd = document.createElement(\"div\");\n    modalAdd.className = \"modal-add\";\n    parent.append(modalAdd);\n    const modalAddContainer = createElement({\n        tag: \"div\",\n        className: [\n            \"modal-add__container\"\n        ],\n        place: modalAdd\n    });\n    const modalAddBoards = createElement({\n        teg: \"div\",\n        className: [\n            \"modal-add__boards\"\n        ],\n        place: modalAddContainer\n    });\n    const modalAddTitle = createElement({\n        tag: \"div\",\n        className: [\n            \"modal-add__title\"\n        ],\n        text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043D\\u0430 \\u0434\\u043E\\u0441\\u043A\\u0443\",\n        place: modalAddBoards\n    });\n    //доски с оберткой\n    const modalAddList = createElement({\n        tag: \"div\",\n        className: [\n            \"modal-add__list\"\n        ],\n        place: modalAddBoards\n    });\n    createBoardsOptions(modalAddList, cardData, [\n        \"\\u0414\\u043E\\u0441\\u043A\\u0430 1\",\n        \"\\u0414\\u043E\\u0441\\u043A\\u0430 2\",\n        \"\\u0414\\u043E\\u0441\\u043A\\u0430 3\"\n    ]);\n    const modalAddFooter = createElement({\n        tag: \"div\",\n        className: [\n            \"modal-add__footer\"\n        ],\n        place: modalAddBoards\n    });\n    const modalAddClose = createElement({\n        tag: \"button\",\n        className: [\n            \"modal-add__close\"\n        ],\n        text: \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\",\n        place: modalAddFooter\n    });\n    //Закрытие и удаление модального окна \"Добавить на доску\"\n    modalAddClose.addEventListener(\"click\", ()=>{\n        modalAdd.remove();\n    });\n}\n//===========================\n//Модальное окно пожаловаться\n// Создает окно жалобы\nfunction createComplaintWindow(parent) {\n    const rootDiv = document.createElement(\"div\");\n    rootDiv.className = \"modal\";\n    parent.append(rootDiv);\n    const body = createElement({\n        tag: \"div\",\n        className: [\n            \"modal_body\"\n        ],\n        place: rootDiv\n    });\n    const content = createElement({\n        teg: \"div\",\n        className: [\n            \"modal_content\"\n        ],\n        place: body\n    });\n    const title = createElement({\n        tag: \"div\",\n        className: [\n            \"modal_title\"\n        ],\n        text: \"\\u0416\\u0430\\u043B\\u043E\\u0431\\u0430 \\u043D\\u0430 \\u043F\\u0438\\u043D\",\n        place: content\n    });\n    //чекбоксы с оберткой\n    const text = createElement({\n        tag: \"div\",\n        className: [\n            \"modal_text\"\n        ],\n        place: content\n    });\n    const arrText = [\n        \"\\u0421\\u043F\\u0430\\u043C\",\n        \"\\u0418\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F \\u043E\\u0431\\u043D\\u0430\\u0436\\u0435\\u043D\\u043D\\u043E\\u0433\\u043E \\u0442\\u0435\\u043B\\u0430, \\u043F\\u043E\\u0440\\u043D\\u043E\\u0433\\u0440\\u0430\\u0444\\u0438\\u044F \\u0438\\u043B\\u0438 \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0438\\u043C\\u043E\\u0435 \\u0441\\u0435\\u043A\\u0441\\u0443\\u0430\\u043B\\u044C\\u043D\\u043E\\u0433\\u043E \\u0445\\u0430\\u0440\\u0430\\u043A\\u0442\\u0435\\u0440\\u0430\",\n        \"\\u0427\\u043B\\u0435\\u043D\\u043E\\u0432\\u0440\\u0435\\u0434\\u0438\\u0442\\u0435\\u043B\\u044C\\u0441\\u0442\\u0432\\u043E\",\n        \"\\u041B\\u043E\\u0436\\u043D\\u0430\\u044F \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F\",\n        \"\\u0410\\u0433\\u0440\\u0435\\u0441\\u0441\\u0438\\u0432\\u043D\\u044B\\u0435 \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F\",\n        \"\\u041E\\u043F\\u0430\\u0441\\u043D\\u044B\\u0435 \\u0442\\u043E\\u0432\\u0430\\u0440\\u044B\",\n        \"\\u041F\\u0440\\u0435\\u0441\\u043B\\u0435\\u0434\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0438\\u043B\\u0438 \\u043A\\u0440\\u0438\\u0442\\u0438\\u043A\\u0430\",\n        \"\\u0421\\u0446\\u0435\\u043D\\u044B \\u043D\\u0430\\u0441\\u0438\\u043B\\u0438\\u044F\",\n        \"\\u041D\\u0430\\u0440\\u0443\\u0448\\u0435\\u043D\\u0438\\u0435 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0434\\u0435\\u043D\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438\",\n        \"\\u042D\\u0442\\u043E \\u043C\\u043E\\u044F \\u0438\\u043D\\u0442\\u0435\\u043B\\u043B\\u0435\\u043A\\u0442\\u0443\\u0430\\u043B\\u044C\\u043D\\u0430\\u044F \\u0441\\u043E\\u0431\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u043E\\u0441\\u0442\\u044C\"\n    ];\n    for(let i = 0; i <= arrText.length - 1; i++){\n        const label = createElement({\n            tag: \"label\",\n            className: [\n                \"modal_label\"\n            ],\n            text: arrText[i],\n            place: text\n        });\n        createElement({\n            tag: \"input\",\n            className: [\n                \"modal_checkbox\"\n            ],\n            attribute: {\n                type: \"checkbox\"\n            },\n            place: label\n        });\n        createElement({\n            tag: \"span\",\n            className: [\n                \"modal_span\"\n            ],\n            place: label\n        });\n    }\n    const footer = createElement({\n        tag: \"div\",\n        className: [\n            \"modal_footer\"\n        ],\n        place: content\n    });\n    const buttonClose = createElement({\n        tag: \"button\",\n        className: [\n            \"modal_close\"\n        ],\n        text: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\",\n        place: footer\n    });\n    const buttonSubmit = createElement({\n        tag: \"button\",\n        className: [\n            \"modal_submit\"\n        ],\n        text: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n        place: footer\n    });\n    // Закрытие и удаление модального окна \n    buttonClose.addEventListener(\"click\", ()=>{\n        rootDiv.remove();\n    });\n    // Отправить форму и закрыть модальное окно\n    buttonSubmit.addEventListener(\"click\", ()=>{\n        rootDiv.remove();\n        window.setTimeout(showAlert, 500);\n        function showAlert() {\n            alert(\"\\u0412\\u0430\\u0448\\u0430 \\u0436\\u0430\\u043B\\u043E\\u0431\\u0430 \\u043E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430!\");\n        }\n    });\n    //Окраска текста при клике на чекбокс\n    const selectors = rootDiv.querySelectorAll(\".modal_label\");\n    for (const selector of selectors)selector.addEventListener(\"click\", (e)=>{\n        const container = e.currentTarget;\n        if (container.firstElementChild.checked) container.style.color = \"red\";\n        else container.style.color = \"black\";\n    });\n}\n//===========================\n// Область карточек\n// Создает элемент карточки\nfunction createCard(cardData, parent) {\n    const cardContainer = createElement({\n        tag: \"div\",\n        className: [\n            \"card\"\n        ],\n        place: parent\n    });\n    const pictureElement = createElement({\n        tag: \"img\",\n        className: [\n            \"card-picture\"\n        ],\n        attribute: {\n            src: cardData.picture + \"?random=\" + cardData.id\n        },\n        place: cardContainer\n    });\n    const cardContent = createElement({\n        tag: \"div\",\n        className: [\n            \"card-content\"\n        ],\n        place: cardContainer\n    });\n    const hashtagElement = createElement({\n        tag: \"div\",\n        className: [\n            \"card-hashtag\"\n        ],\n        text: `#${cardData.hashtag}`,\n        place: cardContent\n    });\n    const avatarElement = createElement({\n        tag: \"img\",\n        className: [\n            \"card-avatar\"\n        ],\n        attribute: {\n            src: cardData.avatar\n        },\n        place: cardContent\n    });\n    return cardContainer;\n}\n// Создает сетку карточек\nfunction createCardsGrid(cards) {\n    const oldMain = document.querySelector(\"main\");\n    if (oldMain) oldMain.remove();\n    const main = createElement({\n        tag: \"main\",\n        className: [\n            \"main\"\n        ],\n        place: root\n    });\n    cards.forEach((cardData)=>{\n        const card = createCard(cardData, main);\n        cardData.view = card;\n        // Меню карточки\n        const cardPinMenu = createPinMenu(cardData, card);\n        card.addEventListener(\"mouseover\", function() {\n            cardPinMenu.style.display = \"flex\";\n        });\n        card.addEventListener(\"mouseout\", function() {\n            cardPinMenu.style.display = \"none\";\n        });\n    });\n}\n//===========================\ncreateHeader();\ngetFromLocalStorage();\nif (cardArray.length == 0) getCards().then((cards)=>{\n    createCardsGrid(cards);\n    setToLocalStorage(cards, \"cardArray\");\n    cardArray = cards;\n});\n\n//# sourceMappingURL=index.b2e3e78b.js.map\n","//=====================\n// Переменные\n\nlet cardArray = [];\nlet cardArrayBoard1 = [];\nlet cardArrayBoard2 = [];\nlet cardArrayBoard3 = [];\n\nconst boards = {\n  0: cardArrayBoard1,\n  1: cardArrayBoard2,\n  2: cardArrayBoard3,\n};\n\nlet activeBoardIndex = -1;\n\n//=====================\n// Методы\n\nasync function getCards() {\n  const response = await fetch(\n    \"https://65d85342c96fbb24c1bb40ab.mockapi.io/api/pintrest/PinterestClone\"\n  );\n\n  return await response.json();\n}\n\nfunction getFromLocalStorage() {\n  if (localStorage.getItem(\"cardArray\")) {\n    cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\n    createCardsGrid(cardArray);\n  }\n  if (localStorage.getItem(\"cardArrayBoard1\")) {\n    boards[0] = cardArrayBoard1 = JSON.parse(localStorage.getItem(\"cardArrayBoard1\"));\n  }\n  if (localStorage.getItem(\"cardArrayBoard2\")) {\n    boards[1] = cardArrayBoard2 = JSON.parse(localStorage.getItem(\"cardArrayBoard2\"));\n  }\n  if (localStorage.getItem(\"cardArrayBoard3\")) {\n    boards[2] = cardArrayBoard3 = JSON.parse(localStorage.getItem(\"cardArrayBoard3\"));\n  }\n}\n\nfunction setToLocalStorage(array, name) {\n  localStorage.setItem(name, JSON.stringify(array));\n}\n\n// Создает элемент с указанными свойствами\nfunction createElement({ tag, className, place, text, attribute }) {\n  const someElem = document.createElement(tag);\n  className.forEach((element) => {\n    someElem.classList.add(element);\n  });\n  if (text) {\n    someElem.innerText = text;\n  }\n  if (attribute) {\n    for (key in attribute) {\n      someElem.setAttribute(`${key}`, `${attribute[key]}`);\n    }\n  }\n\n  place.append(someElem);\n  return someElem;\n}\n\n//=================================\n// Заголовок страницы\n\nfunction searchByLetters(searchTerm, cards) {\n  return cards.filter((card) =>\n    card.hashtag.toLowerCase().includes(searchTerm)\n  );\n}\n\nfunction updateSearchResults(results) {\n  // console.log(\"Обновление отображения результатов: \", results);\n  let main = document.querySelector(\"main\");\n  main.remove();\n  createCardsGrid(results);\n}\n\n// Создает строку поиска\nfunction createSearchBar(parent) {\n  const inputNav = createElement({\n    tag: \"input\",\n    className: [\"navigation__input\"],\n    text: undefined,\n    attribute: {\n      type: \"search\",\n      placeholder: \"Поиск...\",\n    },\n    place: parent,\n  });\n\n  inputNav.addEventListener(\"input\", function (event) {\n    const searchTerm = event.target.value.toLowerCase();\n\n    // поиск и отображение результатов\n    const board = activeBoardIndex != -1 ? boards[ activeBoardIndex ] : cardArray;\n    const searchResults = searchByLetters(searchTerm, board);\n    updateSearchResults(searchResults);\n  });\n}\n\n// Создает элементы выпадающего списка досок\nfunction createBoardsDropdownOptions(dropdown) {\n  const nameBoards = [\"Доска 1\", \"Доска 2\", \"Доска 3\"];\n\n  for (let j = 0; j < nameBoards.length; j++) {\n    const linkBoard = createElement({\n      tag: \"a\",\n      className: [\"Boards__item\"],\n      text: nameBoards[j],\n      place: dropdown,\n    });\n\n    linkBoard.addEventListener(\"click\", function (event) {\n      console.log(\"Выбрана доска:\", nameBoards[j]);\n      let main = document.querySelector(\"main\");\n      main.innerHTML = \"\";\n\n      activeBoardIndex = j;\n      createCardsGrid(boards[j]);\n    });\n  }\n}\n\n// Создает выпадающие список досок\nfunction createBoardsDropdown(parent) {\n    const dropdownMenu = createElement({\n      tag: \"div\",\n      className: [\"Boards__menu\"],\n      place: parent,\n    });\n\n    createBoardsDropdownOptions(dropdownMenu);\n\n    return dropdownMenu;\n}\n\n// Создает заголовок страницы\nfunction createHeader() {\n  const header = createElement({\n    tag: \"header\",\n    className: [\"header\"],\n    place: root,\n  });\n\n  const headerContainer = createElement({\n    tag: \"div\",\n    className: [\"header__container\"],\n    place: header,\n  });\n\n  const navBlock = createElement({\n    tag: \"nav\",\n    className: [\"navigation\"],\n    place: headerContainer,\n  });\n\n  const linkNav = createElement({\n    tag: \"div\",\n    className: [\"link__nav\"],\n    place: navBlock,\n  });\n\n  // Банер страницы\n  const imgLink = createElement({\n    tag: \"img\",\n    className: [\"link__img\"],\n    attribute: {\n      src: \"https://i.pinimg.com/280x280_RS/f6/e9/3a/f6e93a06b500b2d87ffd32e1f56f7c6f.jpg\",\n      alt: \"Pinterest logo\",\n    },\n    place: linkNav,\n  });\n\n  // при загружает грид с главной страницы\n  imgLink.addEventListener(\"click\", function () {\n    activeBoardIndex = -1;\n    createCardsGrid(cardArray);\n  });\n\n  const divInput = createElement({\n    tag: \"div\",\n    className: [\"div__input-icon\", \"div__input-icon_search\"],\n    place: navBlock,\n  });\n\n  createSearchBar(divInput);\n\n  const divButton = createElement({\n    tag: \"div\",\n    className: [\"div__button\"],\n    place: divInput,\n  });\n  const buttonBoards = createElement({\n    tag: \"a\",\n    attribute: { href: \"#\" },\n    className: [\"button-boards\"],\n    place: divButton,\n  });\n  const spanButton = createElement({\n    tag: \"span\",\n    className: [\"button-boards_span\"],\n    text: \"Выбрать доску\",\n    place: buttonBoards,\n  });\n\n  createBoardsDropdown(divButton)\n}\n\n/**\n * Добавляет карточку на выбранную доску\n */\nfunction addCardToBoard(cardData, boardIndex) {\n  switch (boardIndex) {\n    case 0:\n      cardArrayBoard1.push(cardData);\n      setToLocalStorage(cardArray, \"cardArray\");\n      setToLocalStorage(cardArrayBoard1, \"cardArrayBoard1\");\n      break;\n    case 1:\n      cardArrayBoard2.push(cardData);\n      setToLocalStorage(cardArray, \"cardArray\");\n      setToLocalStorage(cardArrayBoard2, \"cardArrayBoard2\");\n      break;\n    case 2:\n      cardArrayBoard3.push(cardData);\n      setToLocalStorage(cardArray, \"cardArray\");\n      setToLocalStorage(cardArrayBoard3, \"cardArrayBoard3\");\n      break;\n  }\n  // Для проверки добавления. Потом надо убрать\n  console.log(`Добавление карты на доску ${boardIndex}:`, cardData);\n}\n\n/**\n * Создает список доступных досок\n */\nfunction createBoardsOptions(parent, cardData, nameBoards) {\n  for (let j = 0; j < nameBoards.length; j++) {\n    const linkBoard = createElement({\n      tag: \"a\",\n      className: [\"list__item\"],\n      attribute: { href: \"#\" },\n      text: nameBoards[j],\n      place: parent,\n    });\n\n    linkBoard.addEventListener(\"click\", function () {\n      const index = cardArray.findIndex((item) => item.id === cardData.id);\n      if (index !== -1) {\n        cardArray.splice(index, 1);\n        addCardToBoard(cardData, j);\n      }\n      cardData.view.remove();\n      cardData.view = null;\n    });\n  }\n}\n\n//===========================\n// Меню карточки\n\n// Создаем кнопку для меню карточки\nfunction createPinMenuButton(parent, buttonText, id) {\n  const button = createElement({\n    tag: \"button\",\n    className: [\"pin-menu__button\"],\n    attribute: {\n      id: [id],\n    },\n    place: parent,\n    text: buttonText,\n  });\n\n  return button;\n}\n\n// Создает меню карточки\nfunction createPinMenu( cardData, parent ) {\n  const pinMenu = createElement({\n    tag: \"div\",\n    className: [\"pin-menu\"],\n    place: parent,\n  });\n\n  const buttonAdd = createPinMenuButton(pinMenu, \"Добавить на доску\", \"button-add\");\n  const buttonComplain = createPinMenuButton(pinMenu, \"Пожаловаться\", \"button-complain\");\n\n  // Открытие окна добавления карточки\n  buttonAdd.addEventListener(\"click\", () => {\n    createModalAdd( pinMenu, cardData );\n  });\n  \n  // Открытие окна жалоб\n  buttonComplain.addEventListener(\"click\", () => {\n    createComplaintWindow( pinMenu );\n  });\n\n  return pinMenu;\n}\n\n//===========================\n// Окно добавления на доску\n\n/** \n * Создает модальное окно для добавления карточки на доску\n */\nfunction createModalAdd(parent, cardData) {\n  const modalAdd = document.createElement(\"div\");\n  modalAdd.className = \"modal-add\";\n  parent.append(modalAdd);\n\n  const modalAddContainer = createElement({\n    tag: \"div\",\n    className: [\"modal-add__container\"],\n    place: modalAdd,\n  });\n\n  const modalAddBoards = createElement({\n    teg: \"div\",\n    className: [\"modal-add__boards\"],\n    place: modalAddContainer,\n  });\n\n  const modalAddTitle = createElement({\n    tag: \"div\",\n    className: [\"modal-add__title\"],\n    text: \"Добавить на доску\",\n    place: modalAddBoards,\n  });\n\n  //доски с оберткой\n  const modalAddList = createElement({\n    tag: \"div\",\n    className: [\"modal-add__list\"],\n    place: modalAddBoards,\n  });\n\n  createBoardsOptions( modalAddList, cardData, [\"Доска 1\", \"Доска 2\", \"Доска 3\"] );\n\n  const modalAddFooter = createElement({\n    tag: \"div\",\n    className: [\"modal-add__footer\"],\n    place: modalAddBoards,\n  });\n\n  const modalAddClose = createElement({\n    tag: \"button\",\n    className: [\"modal-add__close\"],\n    text: \"Закрыть\",\n    place: modalAddFooter,\n  });\n\n  //Закрытие и удаление модального окна \"Добавить на доску\"\n  modalAddClose.addEventListener(\"click\", () => {\n    modalAdd.remove();\n  });\n}\n\n//===========================\n//Модальное окно пожаловаться\n\n// Создает окно жалобы\nfunction createComplaintWindow( parent ) {\n  const rootDiv = document.createElement(\"div\");\n  rootDiv.className = \"modal\";\n  parent.append(rootDiv);\n\n  const body = createElement({\n    tag: \"div\",\n    className: [\"modal_body\"],\n    place: rootDiv,\n  });\n\n  const content = createElement({\n    teg: \"div\",\n    className: [\"modal_content\"],\n    place: body,\n  });\n\n  const title = createElement({\n    tag: \"div\",\n    className: [\"modal_title\"],\n    text: \"Жалоба на пин\",\n    place: content,\n  });\n\n  //чекбоксы с оберткой\n  const text = createElement({\n    tag: \"div\",\n    className: [\"modal_text\"],\n    place: content,\n  });\n\n  const arrText = [\n    \"Спам\",\n    \"Изображения обнаженного тела, порнография или содержимое сексуального характера\",\n    \"Членовредительство\",\n    \"Ложная информация\",\n    \"Агрессивные действия\",\n    \"Опасные товары\",\n    \"Преследование или критика\",\n    \"Сцены насилия\",\n    \"Нарушение конфиденциальности\",\n    \"Это моя интеллектуальная собственность\",\n  ];\n  for (let i = 0; i <= arrText.length - 1; i++) {\n    const label = createElement({\n      tag: \"label\",\n      className: [\"modal_label\"],\n      text: arrText[i],\n      place: text,\n    });\n\n    createElement({\n      tag: \"input\",\n      className: [\"modal_checkbox\"],\n      attribute: {\n        type: \"checkbox\",\n      },\n      place: label,\n    });\n\n    createElement({\n      tag: \"span\",\n      className: [\"modal_span\"],\n      place: label,\n    });\n  }\n\n  const footer = createElement({\n    tag: \"div\",\n    className: [\"modal_footer\"],\n    place: content,\n  });\n\n  const buttonClose = createElement({\n    tag: \"button\",\n    className: [\"modal_close\"],\n    text: \"Отмена\",\n    place: footer,\n  });\n\n  const buttonSubmit = createElement({\n    tag: \"button\",\n    className: [\"modal_submit\"],\n    text: \"Отправить\",\n    place: footer,\n  });\n\n  // Закрытие и удаление модального окна \n  buttonClose.addEventListener(\"click\", () => {\n    rootDiv.remove();\n  });\n\n  // Отправить форму и закрыть модальное окно\n  buttonSubmit.addEventListener(\"click\", () => {\n    rootDiv.remove();\n    window.setTimeout(showAlert, 500);\n    function showAlert() {\n        alert(\"Ваша жалоба отправлена!\");\n    }\n  });\n\n  //Окраска текста при клике на чекбокс\n  const selectors = rootDiv.querySelectorAll(\".modal_label\");\n  for (const selector of selectors) {\n    selector.addEventListener(\"click\", (e) => {\n    const container = e.currentTarget;\n    if (container.firstElementChild.checked) {\n        container.style.color = \"red\";\n    } else {\n        container.style.color = \"black\";\n    }\n    });\n  }\n}\n\n//===========================\n// Область карточек\n\n// Создает элемент карточки\nfunction createCard( cardData, parent ) {\n  const cardContainer = createElement({\n    tag: \"div\",\n    className: [\"card\"],\n    place: parent,\n  });\n\n  const pictureElement = createElement({\n    tag: \"img\",\n    className: [\"card-picture\"],\n    attribute: {\n      src: cardData.picture + \"?random=\" + cardData.id,\n    },\n    place: cardContainer,\n  });\n\n  const cardContent = createElement({\n    tag: \"div\",\n    className: [\"card-content\"],\n    place: cardContainer,\n  });\n\n  const hashtagElement = createElement({\n    tag: \"div\",\n    className: [\"card-hashtag\"],\n    text: `#${cardData.hashtag}`,\n    place: cardContent,\n  });\n\n  const avatarElement = createElement({\n    tag: \"img\",\n    className: [\"card-avatar\"],\n    attribute: { src: cardData.avatar },\n    place: cardContent,\n  });\n\n  return cardContainer;\n}\n\n// Создает сетку карточек\nfunction createCardsGrid(cards) {\n  const oldMain = document.querySelector(\"main\");\n  if (oldMain) {\n    oldMain.remove();\n  }\n  const main = createElement({\n    tag: \"main\",\n    className: [\"main\"],\n    place: root,\n  });\n\n  cards.forEach((cardData) => {\n      const card = createCard( cardData, main );\n      cardData.view = card;\n      \n      // Меню карточки\n      const cardPinMenu = createPinMenu( cardData, card );\n\n      card.addEventListener(\"mouseover\", function () {\n        cardPinMenu.style.display = \"flex\";\n      });\n\n      card.addEventListener(\"mouseout\", function () {\n        cardPinMenu.style.display = \"none\";\n      });\n  });\n}\n\n//===========================\n\ncreateHeader();\ngetFromLocalStorage();\n\nif (cardArray.length == 0) {\n  getCards().then((cards) => {\n    createCardsGrid(cards);\n    setToLocalStorage(cards, \"cardArray\");\n    cardArray = cards;\n  });\n}"],"names":["cardArray","cardArrayBoard1","cardArrayBoard2","cardArrayBoard3","boards","activeBoardIndex","getCards","response","fetch","json","setToLocalStorage","array","name","localStorage","setItem","JSON","stringify","createElement","tag","className","place","text","attribute","someElem","document","forEach","element","classList","add","innerText","key","setAttribute","append","createPinMenuButton","parent","buttonText","id","createCardsGrid","cards","oldMain","querySelector","remove","main","root","cardData","card","createCard","cardContainer","src","picture","cardContent","hashtag","avatar","view","cardPinMenu","createPinMenu","pinMenu","buttonAdd","buttonComplain","addEventListener","createModalAdd","modalAdd","modalAddContainer","modalAddBoards","teg","createBoardsOptions","nameBoards","j","length","linkBoard","href","index","findIndex","item","splice","addCardToBoard","boardIndex","push","console","log","modalAddFooter","modalAddClose","createComplaintWindow","rootDiv","body","content","arrText","i","label","type","footer","buttonClose","buttonSubmit","selector","window","setTimeout","alert","querySelectorAll","e","container","currentTarget","firstElementChild","checked","style","color","display","createHeader","header","headerContainer","navBlock","linkNav","imgLink","alt","divInput","createSearchBar","inputNav","undefined","placeholder","event","results","searchTerm","target","value","toLowerCase","filter","includes","divButton","buttonBoards","createBoardsDropdownOptions","dropdown","innerHTML","getItem","parse","then"],"version":3,"file":"index.b2e3e78b.js.map"}